$text-dark-color: $sakit-dark-color;
$text-light-dark-color: $sakit-light-dark-color;
$text-primary-color: $sakit-primary-color;
$text-success-color: $sakit-secondary-color;
$text-dark-success-color: $sakit-dark-secondary-color;
$text-light: $sakit-light;
$text-light-success-color: $sakit-light-primary-color;
$text-light-gray-color: $sakit-light-gray-color;
$text-gold-color: $sakit-gold-color;
$text-error-color: $sakit-error-color;
$text-color-link: #1e87f0;
$text-danger: $sakit-danger;
$blue-muted :#85C9E8;
$text-colors: ( blue-muted :$blue-muted, black: $text-dark-color, error: $sakit-error-color, muted: $text-light-dark-color, gray: #7d7d7d, light-muted: #999, light-gray: $text-light-gray-color, white: #fff, light: #f0f2f6, primary: $text-primary-color, success: $text-success-color, dark-success: $text-dark-success-color, light-success: $text-light-success-color, gold: $text-gold-color, danger: $text-danger);
$text-sizes: ( inherit: inherit, 3xsmall: .8rem, 2xsmall: 1rem, xsmall: 1.1rem, small: 1.2rem, medium: 1.3rem, xmedium: 1.4rem, 2xmedium: 1.5rem, 3xmedium: 1.6rem, large: 1.8rem, xlarge: 2rem, 2xlarge: 2.4rem);
$text-aligns: ( left: left, center: center, right: right);
$text-styles: ( inherit: inherit, initial: initial, italic: italic, normal: normal, oblique: oblique);
$text-weights: ( bold: bold, bolder: bolder, inherit: inherit, initial: initial, lighter: lighter, normal: normal);
//.text-main-color {
//  color: $black-color !important;
//}
//
//.text-light-color {
//  color: $text-gray-color !important;
//}
//
//.text-lighter-color {
//  color: $text-light-gray-color !important;
//}
//
//.text-placeholder {
//  color: lighten($text-light-gray-color, 33%) !important;
//}
//.text-ellipsis {
//  text-overflow: ellipsis;
//  white-space: nowrap;
//  overflow: hidden;
//  width: 100%;
//}
//
//.text-xsmall {
//  font-size: .775rem;
//}
//
//.text-small {
//  font-size: .875rem;
//}
//
//.\!text-small {
//  font-size: .875rem !important;
//}
//
//.text-medium {
//  font-size: 1.2rem;
//}
//
//.text-large {
//  font-size: 1.5rem;
//}
//
//.text-xlarge {
//  font-size: 1.8rem;
//}
// refactored
.text {
    &__link {
        color: $text-color-link;
        cursor: pointer;
        text-decoration: none;
        transition: color .1s linear;
        &:hover {
            color: darken($text-color-link, 20%);
            text-decoration: none;
        }
    }
    &__italic {
        font-style: italic;
    }
    &__ellipsis {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }
    &__no-wrap {
        white-space: nowrap;
    }
    &__break-spaces {
        white-space: break-spaces;
    }
    &__plain {
        & * {
            color: inherit !important;
            display: inline !important;
            font-family: inherit !important;
            font-style: normal !important;
            font-weight: inherit !important;
            padding: 0;
            text-decoration: none !important;
        }
        & br {
            display: none !important;
        }
    }
    &__space__10 {
        letter-spacing: 10px;
    }
    @each $color in map_keys($text-colors) {
        &__#{"" + $color} {
            color: map-get($text-colors, $color);
        }
    }
}

@each $text in map_keys($text-sizes) {
    .text__#{$text} {
        font-size: map_get($text-sizes, $text);
    }
    .\!text__#{$text} {
        font-size: map_get($text-sizes, $text) !important;
    }
}

@each $align in map_keys($text-aligns) {
    .text__#{$align} {
        text-align: map_get($text-aligns, $align);
    }
    .\!text__#{$align} {
        text-align: map_get($text-aligns, $align) !important;
    }
}

@each $style in map_keys($text-styles) {
    .text__#{$style} {
        font-style: map_get($text-styles, $style);
    }
    .\!text__#{$style} {
        font-style: map_get($text-styles, $style) !important;
    }
}

@each $weight in map_keys($text-weights) {
    .text__#{$weight} {
        font-weight: map-get($text-weights, $weight);
    }
    .\!text__#{$weight} {
        font-weight: map-get($text-weights, $weight) !important;
    }
}

.\!text {
    @each $color in map_keys($text-colors) {
        &__#{"" + $color} {
            color: map-get($text-colors, $color) !important;
        }
    }
}